package Consumidor_Productor;

public class Consumidor implements Runnable {

	private Productos productos;
	boolean seEstaComprando;

	@Override
	public void run() {

		while (true) {
			seEstaComprando = false;
			synchronized (productos) {
				if (!productos.getProductos().isEmpty())
					seEstaComprando = true;

			}
			if (seEstaComprando) {
				int cant;
				synchronized (productos) {
					cant = productos.getProductos().size();
				}
				try {
					Thread.sleep(999);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				comprar(cant);

			} else
				try {
					int max = 3000, min = 2000;
					Thread.sleep((long) (Math.random()*(max-min+1))+1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
		}

	}

	public synchronized void comprar(int cant) {
		if (productos.getProductos().size() == cant)
			if (!productos.getProductos().isEmpty()) {
				productos.getProductos().removeFirst();
				System.out.println(Thread.currentThread().getName() + " - Ha comprado un producto. Quedan "
						+ productos.getProductos().size() + " productos.");
			}

	}

	public Consumidor(Productos productos) {
		super();
		this.productos = productos;
	}
}
